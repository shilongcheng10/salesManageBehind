<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.unicom.salesmanagebehind.dao.NoticeDao">
  <resultMap id="BaseResultMap" type="com.unicom.salesmanagebehind.model.Notice">
    <id column="noticeId" jdbcType="INTEGER" property="noticeId" />
    <result column="noticeTitle" jdbcType="VARCHAR" property="noticeTitle" />
    <result column="noticeContent" jdbcType="VARCHAR" property="noticeContent" />
    <result column="updateTime" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="updateUser" jdbcType="VARCHAR" property="updateUser" />
  </resultMap>
  <sql id="Base_Column_List">
    noticeId, noticeTitle, noticeContent, updateTime, updateUser
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from notice
    where noticeId = #{noticeId,jdbcType=INTEGER}
  </select>
  <!--<select id="getListByCondition" resultMap="BaseResultMap">-->
    <!--select-->
    <!--<include refid="Base_Column_List" />-->
    <!--from notice-->
    <!--where noticeTitle like concat('%',#{noticeTitle},'%')-->
  <!--</select>-->
  <select id="getListByCondition" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from notice
    <where>
      <if test="noticeTitle!=null">
        and noticeTitle like '%${noticeTitle}%'
      </if>
      <if test="updateTime!=null">
        and updateTime like '%${updateTime}%'
      </if>
    </where>
    order by updateTime desc
  </select>



  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from notice
    where noticeId = #{noticeId,jdbcType=INTEGER}
  </delete>

  <delete id="deleteByIds" parameterType="list">
    delete from notice where noticeId in
    <foreach collection="list" item="noticeId" open="(" close=")" separator=",">
      #{noticeId}
    </foreach>
  </delete>


  <insert id="insert" parameterType="com.unicom.salesmanagebehind.model.Notice">
    <selectKey keyProperty="noticeId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into notice (noticeTitle, noticeContent, updateTime, 
      updateUser)
    values (#{noticeTitle,jdbcType=VARCHAR}, #{noticeContent,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP},
      #{updateUser,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.unicom.salesmanagebehind.model.Notice">
    
    insert into notice
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="noticeTitle != null">
        noticeTitle,
      </if>
      <if test="noticeContent != null">
        noticeContent,
      </if>
      <if test="updateTime != null">
        updateTime,
      </if>
      <if test="updateUser != null">
        updateUser,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="noticeTitle != null">
        #{noticeTitle,jdbcType=VARCHAR},
      </if>
      <if test="noticeContent != null">
        #{noticeContent,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null">
        #{updateUser,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.unicom.salesmanagebehind.model.Notice">
    update notice
    <set>
      <if test="noticeTitle != null">
        noticeTitle = #{noticeTitle,jdbcType=VARCHAR},
      </if>
      <if test="noticeContent != null">
        noticeContent = #{noticeContent,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        updateTime = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null">
        updateUser = #{updateUser,jdbcType=VARCHAR},
      </if>
    </set>
    where noticeId = #{noticeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.unicom.salesmanagebehind.model.Notice">
    update notice
    set noticeTitle = #{noticeTitle,jdbcType=VARCHAR},
      noticeContent = #{noticeContent,jdbcType=VARCHAR},
      updateTime = #{updateTime,jdbcType=TIMESTAMP},
      updateUser = #{updateUser,jdbcType=VARCHAR}
    where noticeId = #{noticeId,jdbcType=INTEGER}
  </update>
</mapper>